<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Game Control Variables
turn_count = 0;
player_count = 2;
player_turn = turn_count % player_count;

//board control variables
sizeX = 20;
sizeY = 15;
global.scaleXY = 30;

//board init
board[0,0] = 0;
is_initialized = 0;

//map creation indexes
indexX = 0;
indexY = 0;

//board selection stuff
hovered_space = 0;
selected_space = 0;
hovered_index = 0;
selected_index = 0;

//Unit selection stuff
selected_unit = 0;
prev_selected = 0; //prev selected space
prev_unit = 0; //prev selected unit
unit_moved = false; //flag for unit movement
hovered_unit = 0;

total_spaces = 0;

//Unit attacking stuff
enemy_unit = 0;

//setting planet positions on map
planet1_indexX = 0;
planet1_indexY = 0;

planet2_indexX = 0;
planet2_indexY = 0;

planet3_indexX = 0;
planet3_indexY = 0;



//initial board creation
if(is_initialized == 0)
{
    while(indexX &lt; sizeX)
    {
        while(indexY &lt; sizeY)
        {
            board[indexX,indexY] = instance_create(indexX*global.scaleXY,indexY*global.scaleXY,Spaces);
            board[indexX,indexY].indexX = indexX;
            board[indexX,indexY].indexY = indexY;
    
            total_spaces++;
            indexY++;
        }
        indexY = 0;
        indexX++;
    }
indexX = 0;
is_initialized = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Movement &amp;&amp; Combat Code

//movement code
if(selected_unit != 0 &amp;&amp; selected_unit.has_moved == false &amp;&amp; selected_unit.owned_by == player_turn)//if there is a selected unit, it belongs to the player whos turn it is, and the unit hasn't moved
{
    for(i = 0; i &lt; array_length_1d(selected_unit.valid_x); i++)
    {
        if(mouse_check_button_pressed(mb_left)
        &amp;&amp; hovered_space.indexX == selected_unit.valid_x[i]
        &amp;&amp; hovered_space.indexY == selected_unit.valid_y[i])
        {   
            selected_unit.x = hovered_space.indexX * global.scaleXY;
            selected_unit.y = hovered_space.indexY * global.scaleXY;
            selected_unit.indexX = hovered_space.indexX;
            selected_unit.indexY = hovered_space.indexY
            selected_unit.ability_overlay_reset = true;
            if(instance_exists(hovered_space.occupied_by)){enemy_unit = hovered_space.occupied_by;}
            else{enemy_unit = 0;}
            selected_unit.has_moved = true;
            selected_unit.is_selected = false;
            with(selected_space.selected_index){instance_destroy();}
        }
    }
}
else if(selected_unit != 0 &amp;&amp; selected_unit.has_moved == true)
{
    selected_unit.is_selected = false;
}

//unit combat and destruction code
if(enemy_unit != 0 &amp;&amp; selected_unit != 0 &amp;&amp; selected_unit.owned_by != enemy_unit.owned_by)//if unit on selected space and is an enemy
{
    var i;
    for(i = 0; i &lt; array_length_1d(selected_unit.movement_index); i++)
    {
        if(instance_exists(selected_unit.movement_index[i]))
        {
            with(selected_unit.movement_index[i]) 
            {
                instance_destroy();
            }
        }

    }
    if((selected_unit.unit_type &lt; enemy_unit.unit_type &amp;&amp; selected_unit.unit_type + 1 != enemy_unit.unit_type)
    || (selected_unit.unit_type &gt; enemy_unit.unit_type &amp;&amp; selected_unit.unit_type - 1 == enemy_unit.unit_type))
    {
        if(enemy_unit.unit_type == 0){show_debug_message("PLAYER " + string(player_turn) + " WINS");}//Capitalship destroyed
        with(enemy_unit){instance_destroy();}//destroy enemy unit
        enemy_unit = 0;
    }
    else if(selected_unit.unit_type == enemy_unit.unit_type)
    {
        if(enemy_unit.unit_type == 0){show_debug_message("BOTH PLAYERS LOSE");}//Capitalship destroyed
        with(enemy_unit){instance_destroy();}
        with(selected_unit){instance_destroy();}//destroy both units
        enemy_unit = 0;
        selected_unit = 0;
    }
    else
    {
        if(selected_unit.unit_type == 0){show_debug_message("PLAYER " + string(((player_turn+1)%2)) + " WINS");}//Capitalship destroyed
        with(selected_unit){instance_destroy();}//destroy your unit
        selected_unit = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn Tracker
player_turn = (turn_count % player_count) + 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
