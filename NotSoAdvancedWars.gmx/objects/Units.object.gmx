<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movement_range = 0; //movement range
dmg_type = 0;
arm_type = 0;
ability = 0;
unit_type = 0;

is_selected = 0;
indexX = 0;
indexY = 0;

//which player the unit belongs to
owned_by = 0;
if(indexY &lt; 10){owned_by = 1;}
else{owned_by = 2;}
//movement overlay flags and variables
overlay_initialized = false;
index_count = 0;
movement_index = 0;
valid_x = 0; //arrays of valid moves
valid_y = 0;

//creation flags
unit_initialized = false;

//gameturn stats
has_moved = false;

image_xscale = global.scaleXY/25;
image_yscale = global.scaleXY/25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Types State Machine
/*
movement - Indicates movement range of the craft
dmg_type - indicates the weapon type, which indicates effectiveness against armor
- 0 - heavy
- 1 - medium
- 2 - light
arm_type - indicates the armor type, which indicates effectiveness against weapons
- 0 - heavy
- 1 - medium
- 2 - light
ability - indicates if a ship has an ability, and what the ability is

unit_type - indicates the unit type, which decides the aformentioned parameters
*/




/*Unit_Types
0 - Capital Ship
Heavy Armor
Player can only have 1 Capital Ship
Capital Ship Can Create Units
Capital Ship Cannot attack, but can defend
If Capital Ship is destroyed, that player loses
1 - Corsair
Light Armor
Light Weapons
Short Range
2 - Fighter
Lightly Armor
Medium Weapons
Medium Range
3 - Bomber Frigate
Medium Armor
Heavy Weapons
Medium Range
*/
if(unit_initialized == false)
{
    
    ability = 0;
    unit_type = 0;
    unit_type = floor(random(3));
    
    if((x/30) &lt; 10){owned_by = 1;}//&lt;&lt;&lt;&lt;&lt;&lt;&lt;WE NEED TO FIX THIS, THIS IS SHITTY CODING RIGHT HERE&lt;&lt;&lt;&lt;&lt;&lt;
    else{owned_by = 2;}
    
    switch(unit_type)
    {
        case 0: //Capital
        {
            movement_range = 1;
            dmg_type = 0;
            arm_type = 0;
            ability = 1;
            if(owned_by == 1)
            {
                sprite_index = Ship_Capitol_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Capitol_Blue;
            }
        };
        break;
        case 1: //Bomber
        {
            movement_range = 2;
            dmg_type = 0;
            arm_type = 1;
            if(owned_by == 1)
            {
                sprite_index = Ship_Bomber_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Bomber_Blue;
            }
        };
        break;
        case 2: //Fighter
        {
            movement_range = 3;
            dmg_type = 1;
            arm_type = 2;
            if(owned_by == 1)
            {
                sprite_index = Ship_Fighter_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Fighter_Blue;
            }
        };
        break;
        case 3: //Interceptor
        {
            movement_range = 4;
            dmg_type = 2;
            arm_type = 2;
        };
        break;
    }
    unit_initialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Movement Range
if(has_moved == false)
{
    if(is_selected &amp;&amp; !overlay_initialized)
    {
        
        tempX = indexX + movement_range; // Set tempX to max range in X direction
        tempY = indexY + movement_range; // Set tempY to max range in Y direction
        
        while(tempX &gt;= (indexX - movement_range)) // While tempX is not max range in opposite X direction
        {
            while(tempY &gt;= (indexY - movement_range)) // While temp Y is not max range in opposite Y direction
            {
                if(((abs(tempX - indexX) + abs(tempY - indexY)) &lt;= movement_range)) // If that space can be reached in legal amount of spaces - create instance - else do nothing
                {
                    if(!((tempX == indexX) &amp;&amp; (tempY == indexY))) // Don't create instance if the space is the unit's current space
                    {
                        movement_index[index_count] = instance_create(tempX*global.scaleXY,tempY*global.scaleXY,Spaces);
                        movement_index[index_count].sprite_index = Tile_Movement_Self;
                        movement_index[index_count].image_xscale = global.scaleXY/25;
                        movement_index[index_count].image_yscale = global.scaleXY/25;
                        movement_index[index_count].tile_type = 1;
                        movement_index[index_count].tile_initialized = true;
                        movement_index[index_count].depth = -500;
                        valid_x[index_count] = tempX;
                        valid_y[index_count] = tempY;
                        show_debug_message("(" + string(tempX) + "," + string(tempY) + ")");
                        index_count++;
                    }
                }
                tempY--;
            }
            tempY = indexY + movement_range; // reset Y value for next iteration
            tempX--;
        }
        overlay_initialized = true;
    }
    
    if(!is_selected &amp;&amp; overlay_initialized) // If unit is not selected anymore, but still has movement overlay initialized, destroy overlay
    {
        var i;
        for(i = 0; i &lt; array_length_1d(movement_index); i++)
        {
            if(instance_exists(movement_index[i]))
            {
                with(movement_index[i]) 
                {
                    instance_destroy();
                }
            }
            //valid_x = 0;
            //valid_y = 0;
        }
        overlay_initialized = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
