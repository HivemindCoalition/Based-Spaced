<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movement_range = 0; //movement range
movement_type = 0; //possible movement patterns
dmg_type = 0;
arm_type = 0;
unit_type = 0;


is_selected = 0;
indexX = 0;
indexY = 0;

//which player the unit belongs to
owned_by = 0;

//movement overlay flags and variables
overlay_initialized = false;
ability_overlay_reset = false;
index_count = 0;
movement_index = 0;
valid_x = 0; //arrays of valid moves
valid_y = 0;

//creation flags
unit_initialized = false;

//gameturn stats
has_moved = false;

//ability variables
ability_type = 0;
ability_range = 0;
ability_index = 0;
ability_valid_x = 0; //arrays of ability range
ability_valid_y = 0;
base_ability_index_x = 0;
base_ability_index_y = 0;

//ability overlay and effects flags
is_shielded = false;
ability_overlay_initialized = false;

image_xscale = global.scaleXY/25;
image_yscale = global.scaleXY/25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Types State Machine
/*
movement - Indicates movement range of the craft
dmg_type - indicates the weapon type, which indicates effectiveness against armor
- 0 - heavy
- 1 - medium
- 2 - light
arm_type - indicates the armor type, which indicates effectiveness against weapons
- 0 - heavy
- 1 - medium
- 2 - light
ability - indicates if a ship has an ability, and what the ability is

unit_type - indicates the unit type, which decides the aformentioned parameters
*/

if(unit_initialized == false)
{
    ability_type = 0;
    unit_type = 2;
    indexX = x/global.scaleXY;
    indexY = y/global.scaleXY;
    
    if((x/30) &lt; 10){owned_by = 1;}//&lt;&lt;&lt;&lt;&lt;&lt;&lt;WE NEED TO FIX THIS, THIS IS SHITTY CODING RIGHT HERE&lt;&lt;&lt;&lt;&lt;&lt;
    else{owned_by = 2;}
    
    if(owned_by == 1)
    {
        show_debug_message("entered owned_by == 1");
        if(y == 1*global.scaleXY || y == 2*global.scaleXY || y == 4*global.scaleXY || y == 5*global.scaleXY)//hardcode interceptors
        {
            show_debug_message("entered interceptors");
            unit_type = 4;
        }
        else if(y == 3*global.scaleXY || y == 7*global.scaleXY || y = 13*global.scaleXY)//hardcode fighters
        {
            show_debug_message("entered figthers");
            unit_type = 3;
        }
        else if(y == 8*global.scaleXY || y == 12*global.scaleXY)//hardcode frigates
        {
            show_debug_message("entered frigates");
            unit_type = 2
        }
        else if(y == 11*global.scaleXY)//hardcode Cruiser
        {
            show_debug_message("entered Cruiser");
            unit_type = 1;
        }
        else if(y == 9*global.scaleXY)//hardcode Shield-Gen
        {
            show_debug_message("entered Shield-Gen");
            unit_type = 5;
        }
        else//(y == 10)//hardcode Capital Ship
        {
            show_debug_message("entered Capital Ship");
            unit_type = 0;
        }
    }
    if(owned_by == 2)
    {
        if(y == 13*global.scaleXY || y == 12*global.scaleXY || y == 10*global.scaleXY || y == 9*global.scaleXY)//hardcode interceptors
        {
            show_debug_message("entered interceptors");
            unit_type = 4;
        }
        else if(y == 11*global.scaleXY || y == 7*global.scaleXY || y = 1*global.scaleXY)//hardcode fighters
        {
            show_debug_message("entered figthers");
            unit_type = 3;
        }
        else if(y == 6*global.scaleXY || y == 2*global.scaleXY)//hardcode frigates
        {
            show_debug_message("entered frigates");
            unit_type = 2
        }
        else if(y == 3*global.scaleXY)//hardcode Cruiser
        {
            show_debug_message("entered Cruiser");
            unit_type = 1;
        }
        else if(y == 5*global.scaleXY)//hardcode Shield-Gen
        {
            show_debug_message("entered Shield-Gen");
            unit_type = 5;
        }
        else//(y == 10)//hardcode Capital Ship
        {
            show_debug_message("entered Capital Ship");
            unit_type = 0;
        }
    }
    
    switch(unit_type)
    {
        case 0: //Capital
        {
            movement_range = 1;
            if(owned_by == 1)
            {
                sprite_index = Ship_Capitol_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Capitol_Blue;
            }
        };
        break;
        case 1: //Cruiser
        {
            movement_range = 2;//have to make horizontal only
            movement_type = 1;//vertical horizontal
            if(owned_by == 1)
            {
                sprite_index = Ship_Cruiser_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Cruiser_Blue;
            }
        };
        break;
        case 2: //Bomber
        {
            movement_range = 2;
            if(owned_by == 1)
            {
                sprite_index = Ship_Bomber_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Bomber_Blue;
            }
        };
        break;
        case 3: //Fighter
        {
            movement_range = 3;
            if(owned_by == 1)
            {
                sprite_index = Ship_Fighter_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Fighter_Blue;
            }
        };
        break;
        case 4: //Interceptor
        {
            movement_range = 4;
            if(owned_by == 1)
            {
                sprite_index = Ship_Inter_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Inter_Blue;
            }
        };
        break;
        case 5: //Utility: Shield-Generator
        {
            movement_range = 3;//have to make horizontal only
            movement_type = 1;//vertical horizontal
            ability_type = 1;
            ability_range = 3;
            if(owned_by == 1)
            {
                sprite_index = Ship_Shieldgen_Red;
            }
            else if(owned_by == 2)
            {
                sprite_index = Ship_Shieldgen_Blue;
            }
        };
        break;
    }
    unit_initialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Movement Range
if(has_moved == false)
{
    if(is_selected &amp;&amp; !overlay_initialized)
    {
        index_count = 0;
        tempX = indexX + movement_range; // Set tempX to max range in X direction
        tempY = indexY + movement_range; // Set tempY to max range in Y direction
        
        while(tempX &gt;= (indexX - movement_range)) // While tempX is not max range in opposite X direction
        {
            while(tempY &gt;= (indexY - movement_range)) // While temp Y is not max range in opposite Y direction
            {
                if(((abs(tempX - indexX) + abs(tempY - indexY)) &lt;= movement_range)) // If that space can be reached in legal amount of spaces - create instance - else do nothing
                {
                    if(!((tempX == indexX) &amp;&amp; (tempY == indexY))) // Don't create instance if the space is the unit's current space
                    {
                        if(movement_type == 1)//if movement type is 1, do not create instance if not along horizontal/vertical planes
                        {
                            if(tempX == indexX || tempY == indexY)
                            {
                                if(tempX &gt;= 0 &amp;&amp; tempX &lt; GameController.sizeX &amp;&amp; tempY &gt;= 0 &amp;&amp; tempY &lt; GameController.sizeY)
                                {
                                    if(GameController.board[abs(tempX),abs(tempY)].occupied_by != 0
                                        &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by != 0
                                        &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by != GameController.player_turn)//Create red instance if space is enemy unit, and flag appropriately
                                    {
                                        movement_index[index_count] = instance_create(tempX*global.scaleXY,tempY*global.scaleXY,Spaces);
                                        movement_index[index_count].sprite_index = Tile_Movement_Red;
                                        movement_index[index_count].image_xscale = global.scaleXY/25;
                                        movement_index[index_count].image_yscale = global.scaleXY/25;
                                        movement_index[index_count].tile_type = 1;
                                        movement_index[index_count].tile_initialized = true;
                                        movement_index[index_count].depth = -500;
                                        valid_x[index_count] = tempX;
                                        valid_y[index_count] = tempY;
                                        //show_debug_message("(" + string(tempX) + "," + string(tempY) + ")");
                                        index_count++;
                                    }
                                    else if(GameController.board[abs(tempX),abs(tempY)].occupied_by != 0
                                        &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by != 0
                                        &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by == GameController.player_turn)//do nothing
                                    {}
                                    else
                                    {
                                        movement_index[index_count] = instance_create(tempX*global.scaleXY,tempY*global.scaleXY,Spaces);
                                        movement_index[index_count].sprite_index = Tile_Movement_Green;
                                        movement_index[index_count].image_xscale = global.scaleXY/25;
                                        movement_index[index_count].image_yscale = global.scaleXY/25;
                                        movement_index[index_count].tile_type = 1;
                                        movement_index[index_count].tile_initialized = true;
                                        movement_index[index_count].depth = -500;
                                        valid_x[index_count] = tempX;
                                        valid_y[index_count] = tempY;
                                        //show_debug_message("(" + string(tempX) + "," + string(tempY) + ")");
                                        index_count++;
                                    }
                                }
                            }
                        }
                        else//do nothing
                        {
                            if(tempX &gt;= 0 &amp;&amp; tempX &lt; GameController.sizeX &amp;&amp; tempY &gt;= 0 &amp;&amp; tempY &lt; GameController.sizeY)
                            {
                                if(GameController.board[abs(tempX),abs(tempY)].occupied_by != 0
                                    &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by != 0
                                    &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by != GameController.player_turn)//Create red instance if space is enemy unit, and flag appropriately
                                {
                                    movement_index[index_count] = instance_create(tempX*global.scaleXY,tempY*global.scaleXY,Spaces);
                                    movement_index[index_count].sprite_index = Tile_Movement_Red;
                                    movement_index[index_count].image_xscale = global.scaleXY/25;
                                    movement_index[index_count].image_yscale = global.scaleXY/25;
                                    movement_index[index_count].tile_type = 1;
                                    movement_index[index_count].tile_initialized = true;
                                    movement_index[index_count].depth = -500;
                                    valid_x[index_count] = tempX;
                                    valid_y[index_count] = tempY;
                                    //show_debug_message("(" + string(tempX) + "," + string(tempY) + ")");
                                    index_count++;
                                }
                                else if(GameController.board[abs(tempX),abs(tempY)].occupied_by != 0
                                    &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by != 0
                                    &amp;&amp; GameController.board[abs(tempX),abs(tempY)].occupied_by.owned_by == GameController.player_turn)//do nothing
                                {}
                                else
                                {
                                    movement_index[index_count] = instance_create(tempX*global.scaleXY,tempY*global.scaleXY,Spaces);
                                    movement_index[index_count].sprite_index = Tile_Movement_Green;
                                    movement_index[index_count].image_xscale = global.scaleXY/25;
                                    movement_index[index_count].image_yscale = global.scaleXY/25;
                                    movement_index[index_count].tile_type = 1;
                                    movement_index[index_count].tile_initialized = true;
                                    movement_index[index_count].depth = -500;
                                    valid_x[index_count] = tempX;
                                    valid_y[index_count] = tempY;
                                    //show_debug_message("(" + string(tempX) + "," + string(tempY) + ")");
                                    index_count++;
                                }
                            }
                        }
                    }
                }
                tempY--;
            }
            tempY = indexY + movement_range; // reset Y value for next iteration
            tempX--;
        }
        overlay_initialized = true;
    }
}

if(!is_selected &amp;&amp; overlay_initialized) // If unit is not selected anymore, but still has movement overlay initialized, destroy overlay
{
    var i;
    for(i = 0; i &lt; array_length_1d(movement_index); i++)
    {
        if(instance_exists(movement_index[i]))
        {
            with(movement_index[i]) 
            {
                instance_destroy();
            }
        }
        //valid_x = 0;
        //valid_y = 0;
    }
    overlay_initialized = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End phase code
if(UIController.end_phase)
{
    has_moved = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ability Code

//ShieldGen
//display shield range
if(ability_type == 1 &amp;&amp; unit_initialized)
{
    if(!ability_overlay_initialized)
    {
        index_count = 0;
        tempX = indexX + ability_range; // Set tempX to max range in X direction
        tempY = indexY + ability_range; // Set tempY to max range in Y direction
        while(tempX &gt;= (indexX - ability_range)) // While tempX is not max range in opposite X direction
        {
            while(tempY &gt;= (indexY - ability_range)) // While temp Y is not max range in opposite Y direction
            {
                if(((abs(tempX - indexX) + abs(tempY - indexY)) &lt;= ability_range)) // If that space is in the abilities ranges - create instance - else do nothing
                {
                    if(tempX &gt;= 0 &amp;&amp; tempX &lt; GameController.sizeX &amp;&amp; tempY &gt;= 0 &amp;&amp; tempY &lt; GameController.sizeY)
                    {
                        show_debug_message("creating shield overlay");
                        ability_index[index_count] = instance_create(tempX*global.scaleXY,tempY*global.scaleXY,Spaces);
                        ability_index[index_count].sprite_index = Tile_Shield_White;
                        ability_index[index_count].image_xscale = global.scaleXY/25;
                        ability_index[index_count].image_yscale = global.scaleXY/25;
                        ability_index[index_count].tile_type = 1;
                        ability_index[index_count].tile_initialized = true;
                        ability_index[index_count].depth = -500;
                        ability_valid_x[index_count] = tempX;
                        ability_valid_y[index_count] = tempY;
                        if(tempX == 0 &amp;&amp; tempY == 0)
                        {
                            base_ability_index_x = index_count;
                            base_ability_index_y = index_count;
                        }
                        index_count++;
                    }
                }tempY--;
            }tempY = indexY + ability_range; // reset Y value for next iteration
            tempX--;
        }
        ability_overlay_initialized = true;
    }
}

if(ability_overlay_reset) // If unit is not selected anymore, but still has movement overlay initialized, destroy overlay
{
    var i;
    for(i = 0; i &lt; array_length_1d(ability_index); i++)
    {
        if(instance_exists(ability_index[i]))
        {
            with(ability_index[i]) 
            {
                instance_destroy();
            }
        }
        //valid_x = 0;
        //valid_y = 0;
    }
    ability_overlay_reset = false;
    ability_overlay_initialized = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
