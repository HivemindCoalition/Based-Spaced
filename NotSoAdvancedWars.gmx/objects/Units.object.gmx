<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>range = 0; //movement range
dmg_type = 0;
arm_type = 0;
ability = 0;
unit_type = 0;

is_selected = 0;
indexX = 0;
indexY = 0;

owned_by = 0;

//creation flags
unit_initialized = false;

//gameturn stats
has_moved = false;

image_xscale = global.scaleXY/25;
image_yscale = global.scaleXY/25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Types State Machine
/*
movement - Indicates movement range of the craft
dmg_type - indicates the weapon type, which indicates effectiveness against armor
- 0 - heavy
- 1 - medium
- 2 - light
arm_type - indicates the armor type, which indicates effectiveness against weapons
- 0 - heavy
- 1 - medium
- 2 - light
ability - indicates if a ship has an ability, and what the ability is

unit_type - indicates the unit type, which decides the aformentioned parameters
*/

ability = 0;
unit_type = 0;

is_selected = 0;


/*Unit_Types
0 - Capital Ship
Heavy Armor
Player can only have 1 Capital Ship
Capital Ship Can Create Units
Capital Ship Cannot attack, but can defend
If Capital Ship is destroyed, that player loses
1 - Corsair
Light Armor
Light Weapons
Short Range
2 - Fighter
Lightly Armor
Medium Weapons
Medium Range
3 - Bomber Frigate
Medium Armor
Heavy Weapons
Medium Range
*/
unit_type = floor(random(3));

if(unit_initialized == false)
{
    switch(unit_type)
    {
        case 0: //Capital
        {
            movement = 1;
            dmg_type = 0;
            arm_type = 0;
            ability = 1;
            sprite_index = Ship_Capitol_Red;
        };
        break;
        case 1: //Bomber
        {
            movement = 2;
            dmg_type = 0;
            arm_type = 1;
            sprite_index = Ship_Bomber_Red;
        };
        break;
        case 2: //Fighter
        {
            movement = 3;
            dmg_type = 1;
            arm_type = 2;
            sprite_index = Ship_Fighter_Red;
        };
        break;
        case 3: //Interceptor
        {
            movement = 4;
            dmg_type = 2;
            arm_type = 2;
        };
        break;
    }
    unit_initialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Movement Range
if(is_selected &amp;&amp; selected_index == 0)
{
    tempX = movement_range;
    tempY = movement_range;
    index_count = 0;
    while(tempX &gt;= 0)
    {
        while(tempY &gt;= 0)
        {
            if(tempX+tempY == 0 || tempX+tempY &gt; 3)//don't overlay on own square or display squares out of range
            {
            }
            else
            {
                movement_index[index_count] = instance_create((indexX+tempX)*global.scaleXY,tempY*global.scaleXY,Spaces);
                movement_index[index_count].sprite_index = Tile_Movement_Self;
                movement_index[index_count].image_xscale = global.scaleXY/25;
                movement_index[index_count].image_yscale = global.scaleXY/25;
                movement_index[index_count].tile_type = 1;
                movement_index[index_count].tile_initialized = true;
                movement_index[index_count].depth = -500;
                index_count++;
                
                movement_index[index_count] = instance_create((indexX-tempX)*global.scaleXY,tempY*global.scaleXY,Spaces);
                movement_index[index_count].sprite_index = Tile_Movement_Self;
                movement_index[index_count].image_xscale = global.scaleXY/25;
                movement_index[index_count].image_yscale = global.scaleXY/25;
                movement_index[index_count].tile_type = 1;
                movement_index[index_count].tile_initialized = true;
                movement_index[index_count].depth = -500;
                index_count++;
                tempY--;
            }
        }
    }
    
    GameController.indexX = indexX;
    GameController.indexY = indexY;
    with(GameController)
    {
        GameController.selected_unit = GameController.board[indexX, indexY].occupied_by;
    }
    hovered_index = instance_create(x,y,Spaces);
    hovered_index.depth = -500; 
    hovered_index.sprite_index = Tile_Selected;
    hovered_index.tile_type = 1;
    is_hovered = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
