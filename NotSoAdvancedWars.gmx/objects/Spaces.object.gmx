<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>terrain = 0;
occupied_by = 0; // keeps id of occupying unit
controlled_by = 0;
//indexX = 0;
//indexY = 0;

tile_initialized = false; //used to flag when a tile has finished having all of its attributes set
tile_type = 0; //used to denote if the tile is a board tile(0) or an overlay tile(1)
is_selected = false; //if a space is selected
is_hovered = false; //mouse hover
hovered_index = 0;
selected_index = 0;
overlay = 0;

//tile initialization
if(tile_type == 0) //initializing terrain tiles
{
    switch(terrain)
    {
        case 0: //open space
        {
            sprite_index = Tile_Empty;
            image_xscale = global.scaleXY/25;
            image_yscale = global.scaleXY/25;
            tile_initialized = true;
        };
        break;
        case 1: //Planet
        {
            sprite_index = Tile_Planet_Green;
            image_xscale = global.scaleXY/25;
            image_yscale = global.scaleXY/25;
            tile_initialized = true;
        };
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check for mouse hovering and for selected tile
if(tile_type = 0)
{
    if(position_meeting(mouse_x,mouse_y,self)==true)
    {
        is_hovered = true;
    }
    else
    {
        is_hovered = false;
    }
    
    //selection code
    if(position_meeting(mouse_x,mouse_y,self)==true &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; is_selected == false)
    {
        if(instance_exists(GameController.selected_space) &amp;&amp; GameController.selected_space != 0)//previously selected space removal
        {
            with(GameController.selected_space.selected_index)
            {
                instance_destroy();
            }
            selected_index = 0;
            GameController.selected_space = 0;
            is_selected = false;            
        }
        
        //store selected space ID
        GameController.indexX = indexX;
        GameController.indexY = indexY;
        with(GameController)
        {
            GameController.selected_space = GameController.board[indexX, indexY];
        }
        
        //if space is occupied by a unit
        if(occupied_by != 0)
        {
            with(GameController)
            {
                selected_unit = board[indexX, indexY].occupied_by;
            }
        }
        
        //create overlay space
        selected_index = instance_create(x,y,Spaces);
        selected_index.depth = -500; 
        selected_index.sprite_index = Tile_Selected;
        selected_index.tile_type = 1;
        is_selected = true;
        
    }
    else if(position_meeting(mouse_x,mouse_y,self)==true &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; is_selected == true)
    {
        with(selected_index)
        {
            instance_destroy();
        }
        selected_index = 0;
        GameController.selected_space = 0;
        is_selected = false;
    }
}
if(is_hovered == true &amp;&amp; hovered_index == 0)
{
    GameController.indexX = indexX;
    GameController.indexY = indexY;
    with(GameController)
    {
        GameController.hovered_space = GameController.board[indexX, indexY];
    }
    hovered_index = instance_create(x,y,Spaces);
    hovered_index.depth = -500; 
    hovered_index.sprite_index = Tile_Selected;
    hovered_index.tile_type = 1;
    is_hovered = true;
}
if(is_hovered == false)
{
    with(hovered_index)
    {
        instance_destroy();
    }
    hovered_index = 0;
    GameController.hovered_space = 0;
}

if(is_selected &amp;&amp; instance_exists(GameController.selected_space) &amp;&amp; GameController.selected_space != id)
{
    with(selected_index)
    {
        instance_destroy();
    }
    selected_index = 0;
    is_selected = false;   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Interation Code
if(position_meeting(x,y,Units)==true)
{
    occupied_by = instance_place(x,y,Units);
}
else
{
    occupied_by = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
